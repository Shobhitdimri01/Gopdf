package main

import (
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/johnfercher/maroto/v2/pkg/config"
	"github.com/johnfercher/maroto/v2/pkg/consts/align"
	"github.com/johnfercher/maroto/v2/pkg/consts/border"
	"github.com/johnfercher/maroto/v2/pkg/consts/fontstyle"
	"github.com/johnfercher/maroto/v2/pkg/core"
	"github.com/johnfercher/maroto/v2/pkg/props"

	"github.com/johnfercher/maroto/v2"

	"github.com/johnfercher/maroto/v2/pkg/components/col"
	"github.com/johnfercher/maroto/v2/pkg/components/image"
	"github.com/johnfercher/maroto/v2/pkg/components/row"
	"github.com/johnfercher/maroto/v2/pkg/components/text"
)

func main() {
    m := GetMaroto()
    document, err := m.Generate()
    if err != nil {
        log.Fatal(err)
    }

    err = document.Save("simplestv2.pdf")
    if err != nil {
        log.Fatal(err)
    }
}

func GetMaroto() core.Maroto {
	cfg := config.NewBuilder().
	WithPageNumber().
	WithLeftMargin(10).
	WithTopMargin(15).
	WithRightMargin(10).
	Build()

	darkGrayColor := getDarkGrayColor()

    mrt := maroto.New(cfg)
	m := maroto.NewMetricsDecorator(mrt)
	
	err := m.RegisterHeader(getPageHeader())
	if err!=nil{
		fmt.Println(err.Error())
	}
	
	m.AddRows(text.NewRow(8,"This pdf is generated by phela parikshan",props.Text{
		Top: 1,
		Style: fontstyle.BoldItalic,
		Align: align.Center,
		Color: getRedColor(),
	}))

	//

	m.AddRow(7,
        text.NewCol(12, "Test Case Summary", props.Text{
            Top:   1.5,
            Size:  9,
            Style: fontstyle.Bold,
            Align: align.Center,
            Color: &props.WhiteColor,
        }),
    ).WithStyle(&props.Cell{BackgroundColor: darkGrayColor})


	m.AddRows(getTransactions()...)

    return m
}


func getPageHeader() core.Row {
	images := image.NewFromFileCol(12,"images/Tcs_logo.jpg",
			props.Rect{ 
				Center: true, Percent: 70,
			})
    return row.New(30).Add(images)
}


func getTransactions() []core.Row {
    rows := []core.Row{
        row.New(6).Add(
            col.New(1),
			text.NewCol(1, "S.No", props.Text{Size: 9, Align: align.Left, Style: fontstyle.Bold}),
            text.NewCol(2, "Time", props.Text{Size: 9, Align: align.Center, Style: fontstyle.Bold}),
            text.NewCol(3, "TestCaseName", props.Text{Size: 9, Align: align.Center, Style: fontstyle.Bold}),
            text.NewCol(1, "Result", props.Text{Size: 9, Align: align.Center, Style: fontstyle.Bold}),
            text.NewCol(2, "Status", props.Text{Size: 9, Align: align.Center, Style: fontstyle.Bold}),
        ).WithStyle(&props.Cell{
			BorderType: border.Full,
		},

		),
    }

    var contentsRow []core.Row
    contents := getContents()
    /*for i := 0; i < 8; i++ {
        contents = append(contents, contents...)
    }*/

    for i, content := range contents {
        r := row.New(10).Add(
            col.New(1),
			text.NewCol(1, strconv.Itoa(i+1), props.Text{Size: 8, Align: align.Center}),
            text.NewCol(2, content[0], props.Text{Size: 10, Align: align.Center}),
            text.NewCol(3, content[1], props.Text{Size: 10, Align: align.Center}),
            text.NewCol(1, content[2], props.Text{Size: 10, Align: align.Center}),
            text.NewCol(2, content[3], props.Text{Size: 10, Align: align.Center}),
        ).WithStyle(&props.Cell{
			BorderType: border.Full,
		})
		fmt.Println(i," ",content[2])
        if content[2] == "Pass" {
            r.WithStyle(&props.Cell{BackgroundColor: getGreenColor()})
        }else{
			r.WithStyle(&props.Cell{BackgroundColor: getLightRedColor()})
		}

        contentsRow = append(contentsRow, r)
    }

    rows = append(rows, contentsRow...)

    return rows
}

func getContents() [][]string {
	currentTime := time.Now()
	formattedTime := currentTime.Format("15:04:05") // Use 15 for 24-hour format, 03 for 12-hour format
	
    return [][]string{
		{formattedTime,"Attach-Detach","Pass","Nil"},
		{formattedTime,"S1-Setup","Fail","failed to connect"},
		{formattedTime,"EnbRab","Pass","Nil"},
		{formattedTime,"CBC CreateCBC","Fail","Not able to connect"},
    }
}

//colors

func getRedColor()*props.Color{
	return &props.Color{
		Red: 181,
		Green: 48,
		Blue: 0,
		}
}
func getLightRedColor()*props.Color{
	return &props.Color{
		Red: 213,
		Green: 101,
		Blue: 101,
		}
}
func getGreenColor()*props.Color{
	return &props.Color{
		Red: 35,
		Green: 239,
		Blue: 109,
		}
}


func getDarkGrayColor() *props.Color {
    return &props.Color{
        Red:   55,
        Green: 55,
        Blue:  55,
    }
}

func getGrayColor() *props.Color {
    return &props.Color{
        Red:   200,
        Green: 200,
        Blue:  200,
    }
}